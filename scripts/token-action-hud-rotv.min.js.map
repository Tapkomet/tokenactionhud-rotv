{"version":3,"file":"token-action-hud-rotv.min.js","sources":["constants.js","utils.js","action-handler.js","defaults.js","magic-items-extender.js","roll-handler.js","roll-handler-obsidian.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n    ID: 'token-action-hud-rotv'\n}\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n    ID: 'token-action-hud-core'\n}\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '1.5'\n\n/**\n * Action type\n */\nexport const ACTION_TYPE = {\n    ability: 'ROTV.Ability',\n    check: 'tokenActionHud.rotv.check',\n    condition: 'tokenActionHud.rotv.condition',\n    counter: 'tokenActionHud.rotv.counter',\n    effect: 'ROTV.Effect',\n    exhaustion: 'ROTV.Exhaustion',\n    feature: 'ITEM.TypeFeat',\n    item: 'tokenActionHud.rotv.item',\n    save: 'ROTV.ActionSave',\n    skill: 'tokenActionHud.rotv.skill',\n    spell: 'ITEM.TypeSpell',\n    utility: 'ROTV.ActionUtil'\n}\n\n/**\n * Activation type icons\n */\nexport const ACTIVATION_TYPE_ICON = {\n    bonus: 'fas fa-plus',\n    crew: 'fas fa-users',\n    day: 'fas fa-hourglass-end',\n    hour: 'fas fa-hourglass-half',\n    lair: 'fas fa-home',\n    minute: 'fas fa-hourglass-start',\n    legendary: 'fas fas fa-dragon',\n    reaction: 'fas fa-bolt',\n    special: 'fas fa-star'\n}\n\n/**\n * Concentration icon\n */\nexport const CONCENTRATION_ICON = 'systems/rotv/icons/svg/statuses/concentrating.svg'\n\n/**\n * Conditions\n */\nexport const CONDITION = {\n    blind: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.0b8N4FymGGfbZGpJ' },\n    blinded: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.0b8N4FymGGfbZGpJ' },\n    'Convenient Effect: Blinded': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.0b8N4FymGGfbZGpJ' },\n    charmed: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.zZaEBrKkr66OWJvD' },\n    'Convenient Effect: Charmed': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.zZaEBrKkr66OWJvD' },\n    deaf: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.6G8JSjhn701cBITY' },\n    deafened: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.6G8JSjhn701cBITY' },\n    'Convenient Effect: Deafened': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.6G8JSjhn701cBITY' },\n    fear: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.oreoyaFKnvZCrgij' },\n    'Convenient Effect: Frightened': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.oreoyaFKnvZCrgij' },\n    frightened: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.oreoyaFKnvZCrgij' },\n    grappled: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.gYDAhd02ryUmtwZn' },\n    'Convenient Effect: Grappled': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.gYDAhd02ryUmtwZn' },\n    incapacitated: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.TpkZgLfxCmSndmpb' },\n    'Convenient Effect: Incapacitated': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.TpkZgLfxCmSndmpb' },\n    invisible: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.3UU5GCTVeRDbZy9u' },\n    'Convenient Effect: Invisible': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.3UU5GCTVeRDbZy9u' },\n    paralysis: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.xnSV5hLJIMaTABXP' },\n    paralyzed: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.xnSV5hLJIMaTABXP' },\n    'Convenient Effect: Paralyzed': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.xnSV5hLJIMaTABXP' },\n    petrified: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.xaNDaW6NwQTgHSmi' },\n    'Convenient Effect: Petrified': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.xaNDaW6NwQTgHSmi' },\n    poison: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.lq3TRI6ZlED8ABMx' },\n    poisoned: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.lq3TRI6ZlED8ABMx' },\n    'Convenient Effect: Poisoned': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.lq3TRI6ZlED8ABMx' },\n    prone: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.y0TkcdyoZlOTmAFT' },\n    'Convenient Effect: Prone': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.y0TkcdyoZlOTmAFT' },\n    restrain: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cSVcyZyNe2iG1fIc' },\n    restrained: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cSVcyZyNe2iG1fIc' },\n    'Convenient Effect: Restrained': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cSVcyZyNe2iG1fIc' },\n    stun: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.ZyZMUwA2rboh4ObS' },\n    stunned: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.ZyZMUwA2rboh4ObS' },\n    'Convenient Effect: Stunned': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.ZyZMUwA2rboh4ObS' },\n    unconscious: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.UWw13ISmMxDzmwbd' },\n    'Convenient Effect: Unconscious': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.UWw13ISmMxDzmwbd' },\n    exhaustion: { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cspWveykstnu3Zcv' },\n    'Convenient Effect: Exhaustion 1': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cspWveykstnu3Zcv' },\n    'Convenient Effect: Exhaustion 2': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cspWveykstnu3Zcv' },\n    'Convenient Effect: Exhaustion 3': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cspWveykstnu3Zcv' },\n    'Convenient Effect: Exhaustion 4': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cspWveykstnu3Zcv' },\n    'Convenient Effect: Exhaustion 5': { uuid: 'Compendium.rotv.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cspWveykstnu3Zcv' }\n}\n\n/**\n * Groups\n */\nexport const GROUP = {\n    _1stLevelSpells: { id: '1st-level-spells', name: 'tokenActionHud.rotv.1stLevelSpells', type: 'system' },\n    _2ndLevelSpells: { id: '2nd-level-spells', name: 'tokenActionHud.rotv.2ndLevelSpells', type: 'system' },\n    _3rdLevelSpells: { id: '3rd-level-spells', name: 'tokenActionHud.rotv.3rdLevelSpells', type: 'system' },\n    _4thLevelSpells: { id: '4th-level-spells', name: 'tokenActionHud.rotv.4thLevelSpells', type: 'system' },\n    _5thLevelSpells: { id: '5th-level-spells', name: 'tokenActionHud.rotv.5thLevelSpells', type: 'system' },\n    _6thLevelSpells: { id: '6th-level-spells', name: 'tokenActionHud.rotv.6thLevelSpells', type: 'system' },\n    _7thLevelSpells: { id: '7th-level-spells', name: 'tokenActionHud.rotv.7thLevelSpells', type: 'system' },\n    _8thLevelSpells: { id: '8th-level-spells', name: 'tokenActionHud.rotv.8thLevelSpells', type: 'system' },\n    _9thLevelSpells: { id: '9th-level-spells', name: 'tokenActionHud.rotv.9thLevelSpells', type: 'system' },\n    abilities: { id: 'abilities', name: 'tokenActionHud.rotv.abilities', type: 'system' },\n    actions: { id: 'actions', name: 'ROTV.ActionPl', type: 'system' },\n    activeFeatures: { id: 'active-features', name: 'tokenActionHud.rotv.activeFeatures', type: 'system' },\n    artificerInfusions: { id: 'artificer-infusions', name: 'tokenActionHud.rotv.artificerInfusions', type: 'system' },\n    atWillSpells: { id: 'at-will-spells', name: 'tokenActionHud.rotv.atWillSpells', type: 'system' },\n    backgroundFeatures: { id: 'background-features', name: 'tokenActionHud.rotv.backgroundFeatures', type: 'system' },\n    bonusActions: { id: 'bonus-actions', name: 'tokenActionHud.rotv.bonusActions', type: 'system' },\n    cantrips: { id: 'cantrips', name: 'tokenActionHud.rotv.cantrips', type: 'system' },\n    channelDivinity: { id: 'channel-divinity', name: 'tokenActionHud.rotv.channelDivinity', type: 'system' },\n    checks: { id: 'checks', name: 'tokenActionHud.rotv.checks', type: 'system' },\n    classFeatures: { id: 'class-features', name: 'tokenActionHud.rotv.classFeatures', type: 'system' },\n    combat: { id: 'combat', name: 'tokenActionHud.combat', type: 'system' },\n    conditions: { id: 'conditions', name: 'tokenActionHud.rotv.conditions', type: 'system' },\n    consumables: { id: 'consumables', name: 'ITEM.TypeConsumablePl', type: 'system' },\n    containers: { id: 'containers', name: 'ITEM.TypeContainerPl', type: 'system' },\n    counters: { id: 'counters', name: 'tokenActionHud.rotv.counters', type: 'system' },\n    crewActions: { id: 'crew-actions', name: 'tokenActionHud.rotv.crewActions', type: 'system' },\n    defensiveTactics: { id: 'defensive-tactics', name: 'tokenActionHud.rotv.defensiveTactics', type: 'system' },\n    eldritchInvocations: { id: 'eldritch-invocations', name: 'tokenActionHud.rotv.eldritchInvocations', type: 'system' },\n    elementalDisciplines: { id: 'elemental-disciplines', name: 'tokenActionHud.rotv.elementalDisciplines', type: 'system' },\n    equipment: { id: 'equipment', name: 'ITEM.TypeEquipmentPl', type: 'system' },\n    equipped: { id: 'equipped', name: 'ROTV.Equipped', type: 'system' },\n    exhaustion: { id: 'exhaustion', name: 'ROTV.Exhaustion', type: 'system' },\n    feats: { id: 'feats', name: 'tokenActionHud.rotv.feats', type: 'system' },\n    fightingStyles: { id: 'fighting-styles', name: 'tokenActionHud.rotv.fightingStyles', type: 'system' },\n    huntersPrey: { id: 'hunters-prey', name: 'tokenActionHud.rotv.huntersPrey', type: 'system' },\n    innateSpells: { id: 'innate-spells', name: 'tokenActionHud.rotv.innateSpells', type: 'system' },\n    kiAbilities: { id: 'ki-abilities', name: 'tokenActionHud.rotv.kiAbilities', type: 'system' },\n    lairActions: { id: 'lair-actions', name: 'tokenActionHud.rotv.lairActions', type: 'system' },\n    legendaryActions: { id: 'legendary-actions', name: 'tokenActionHud.rotv.legendaryActions', type: 'system' },\n    loot: { id: 'loot', name: 'ITEM.TypeLootPl', type: 'system' },\n    maneuvers: { id: 'maneuvers', name: 'tokenActionHud.rotv.maneuvers', type: 'system' },\n    metamagicOptions: { id: 'metamagic-options', name: 'tokenActionHud.rotv.metamagicOptions', type: 'system' },\n    monsterFeatures: { id: 'monster-features', name: 'tokenActionHud.rotv.monsterFeatures', type: 'system' },\n    multiattacks: { id: 'multiattacks', name: 'tokenActionHud.rotv.multiattacks', type: 'system' },\n    otherActions: { id: 'other-actions', name: 'tokenActionHud.rotv.otherActions', type: 'system' },\n    pactBoons: { id: 'pact-boons', name: 'tokenActionHud.rotv.pactBoons', type: 'system' },\n    pactSpells: { id: 'pact-spells', name: 'tokenActionHud.rotv.pactSpells', type: 'system' },\n    passiveEffects: { id: 'passive-effects', name: 'ROTV.EffectPassive', type: 'system' },\n    passiveFeatures: { id: 'passive-features', name: 'tokenActionHud.rotv.passiveFeatures', type: 'system' },\n    psionicPowers: { id: 'psionic-powers', name: 'tokenActionHud.rotv.psionicPowers', type: 'system' },\n    raceFeatures: { id: 'race-features', name: 'tokenActionHud.rotv.raceFeatures', type: 'system' },\n    reactions: { id: 'reactions', name: 'ROTV.ReactionPl', type: 'system' },\n    rests: { id: 'rests', name: 'tokenActionHud.rotv.rests', type: 'system' },\n    runes: { id: 'runes', name: 'tokenActionHud.rotv.runes', type: 'system' },\n    saves: { id: 'saves', name: 'ROTV.ClassSaves', type: 'system' },\n    skills: { id: 'skills', name: 'tokenActionHud.rotv.skills', type: 'system' },\n    superiorHuntersDefense: { id: 'superior-hunters-defense', name: 'tokenActionHud.rotv.superiorHuntersDefense', type: 'system' },\n    temporaryEffects: { id: 'temporary-effects', name: 'ROTV.EffectTemporary', type: 'system' },\n    token: { id: 'token', name: 'tokenActionHud.token', type: 'system' },\n    tools: { id: 'tools', name: 'ITEM.TypeToolPl', type: 'system' },\n    unequipped: { id: 'unequipped', name: 'ROTV.Unequipped', type: 'system' },\n    utility: { id: 'utility', name: 'tokenActionHud.utility', type: 'system' },\n    weapons: { id: 'weapons', name: 'ITEM.TypeWeaponPl', type: 'system' }\n}\n\n/**\n * Prepared icon\n */\nexport const PREPARED_ICON = 'fas fa-sun'\n\n/**\n * Proficiency level icons\n */\nexport const PROFICIENCY_LEVEL_ICON = {\n    0.5: 'fas fa-adjust',\n    1: 'fas fa-check',\n    2: 'fas fa-check-double'\n}\n\n/**\n * Rarity\n */\nexport const RARITY = {\n    common: 'tokenActionHud.rotv.common',\n    uncommon: 'tokenActionHud.rotv.uncommon',\n    rare: 'tokenActionHud.rotv.rare',\n    veryRare: 'tokenActionHud.rotv.veryRare',\n    legendary: 'tokenActionHud.rotv.legendary',\n    artifact: 'tokenActionHud.rotv.artifact'\n}\n\n/**\n * Ritual icon\n */\nexport const RITUAL_ICON = 'fas fa-circle-r'\n\n/**\n * Weapon properties\n */\nexport const WEAPON_PROPERTY = {\n    ada: 'ROTV.WeaponPropertiesAda',\n    amm: 'ROTV.WeaponPropertiesAmm',\n    fin: 'ROTV.WeaponPropertiesFin',\n    fir: 'ROTV.WeaponPropertiesFir',\n    foc: 'ROTV.WeaponPropertiesFoc',\n    hvy: 'ROTV.WeaponPropertiesHvy',\n    lgt: 'ROTV.WeaponPropertiesLgt',\n    lod: 'ROTV.WeaponPropertiesLod',\n    mgc: 'ROTV.WeaponPropertiesMgc',\n    rch: 'ROTV.WeaponPropertiesRch',\n    rel: 'ROTV.WeaponPropertiesRel',\n    ret: 'ROTV.WeaponPropertiesRet',\n    sil: 'ROTV.WeaponPropertiesSil',\n    spc: 'ROTV.WeaponPropertiesSpc',\n    thr: 'ROTV.WeaponPropertiesThr',\n    two: 'ROTV.WeaponPropertiesTwo',\n    ver: 'ROTV.WeaponPropertiesVer'\n}\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    Utils = class Utils {\n    /**\n     * Get setting value\n     * @param {string} key The key\n     * @param {string=null} defaultValue The default value\n     * @returns The setting value\n     */\n        static getSetting (key, defaultValue = null) {\n            let value = defaultValue ?? null\n            try {\n                value = game.settings.get(MODULE.ID, key)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n            return value\n        }\n\n        /**\n     * Set setting value\n     * @param {string} key The key\n     * @param {string} value The value\n     */\n        static async setSetting (key, value) {\n            try {\n                value = await game.settings.set(MODULE.ID, key, value)\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n        }\n    }\n})\n","// System Module Imports\nimport { ACTIVATION_TYPE_ICON, ACTION_TYPE, CONCENTRATION_ICON, CONDITION, PREPARED_ICON, PROFICIENCY_LEVEL_ICON, RARITY, WEAPON_PROPERTY } from './constants.js'\nimport { Utils } from './utils.js'\n\nexport let ActionHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n    // Initialize actor and token variables\n        actors = null\n        tokens = null\n        actorType = null\n\n        // Initialize items variable\n        items = null\n\n        // Initialize setting variables\n        abbreviateSkills = null\n        displaySpellInfo = null\n        showItemsWithoutActivationCosts = null\n        showUnchargedItems = null\n        showUnequippedItems = null\n        showUnpreparedSpells = null\n\n        // Initialize groupIds variables\n        activationgroupIds = null\n        featuregroupIds = null\n        inventorygroupIds = null\n        spellgroupIds = null\n\n        // Initialize action variables\n        featureActions = null\n        inventoryActions = null\n        spellActions = null\n\n        systemVersion = game.rotv.version\n\n        /**\n         * Build System Actions\n         * @override\n         * @param {array} groupIds\n         * @returns {object}\n         */\n        async buildSystemActions (groupIds) {\n        // Set actor and token variables\n            this.actors = (!this.actor) ? this.#getActors() : [this.actor]\n            this.tokens = (!this.token) ? this.#getTokens() : [this.token]\n            this.actorType = this.actor?.type\n\n            // Set items variable\n            if (this.actor) {\n                let items = this.actor.items\n                items = this.#discardSlowItems(items)\n                items = coreModule.api.Utils.sortItemsByName(items)\n                this.items = items\n            }\n\n            // Set settings variables\n            this.abbreviateSkills = Utils.getSetting('abbreviateSkills')\n            this.displaySpellInfo = Utils.getSetting('displaySpellInfo')\n            this.showItemsWithoutActivationCosts = Utils.getSetting('showItemsWithoutActivationCosts')\n            this.showUnchargedItems = Utils.getSetting('showUnchargedItems')\n            this.showUnequippedItems = Utils.getSetting('showUnequippedItems')\n            if (this.actorType === 'npc' && !this.showUnequippedItems) {\n                this.showUnequippedItems = Utils.getSetting('showUnequippedItemsNpcs')\n            }\n            this.showUnpreparedSpells = Utils.getSetting('showUnpreparedSpells')\n\n            this.activationgroupIds = [\n                'actions',\n                'bonus-actions',\n                'crew-actions',\n                'lair-actions',\n                'legendary-actions',\n                'reactions',\n                'other-actions'\n            ]\n\n            this.featuregroupIds = [\n                'active-features',\n                'passive-features',\n                'background-features',\n                'class-features',\n                'feats',\n                'monster-features',\n                'race-features',\n                'artificer-infusions',\n                'channel-divinity',\n                'defensive-tactics',\n                'eldritch-invocations',\n                'elemental-disciplines',\n                'fighting-styles',\n                'hunters-prey',\n                'ki-abilities',\n                'maneuvers',\n                'metamagic-options',\n                'multiattacks',\n                'pact-boons',\n                'psionic-powers',\n                'runes',\n                'superior-hunters-defense'\n            ]\n\n            this.spellgroupIds = [\n                'cantrips',\n                '1st-level-spells',\n                '2nd-level-spells',\n                '3rd-level-spells',\n                '4th-level-spells',\n                '5th-level-spells',\n                '6th-level-spells',\n                '7th-level-spells',\n                '8th-level-spells',\n                '9th-level-spells',\n                'at-will-spells',\n                'innate-spells',\n                'pact-spells'\n            ]\n\n            if (this.actorType === 'character' || this.actorType === 'npc') {\n                this.inventorygroupIds = [\n                    'equipped',\n                    'consumables',\n                    'containers',\n                    'equipment',\n                    'loot',\n                    'tools',\n                    'weapons',\n                    'unequipped'\n                ]\n\n                await this.#buildCharacterActions()\n            } else if (this.actorType === 'vehicle') {\n                this.inventorygroupIds = [\n                    'consumables',\n                    'equipment',\n                    'tools',\n                    'weapons'\n                ]\n\n                await this.#buildVehicleActions()\n            } else if (!this.actor) {\n                await this.#buildMultipleTokenActions()\n            }\n        }\n\n        /**\n         * Build character actions\n         * @private\n         * @returns {object}\n         */\n        async #buildCharacterActions () {\n            await Promise.all([\n                this.#buildConditions(),\n                this.#buildEffects(),\n                this.#buildFeatures(),\n                this.#buildInventory(),\n                this.#buildSpells()\n            ])\n            this.#buildAbilities('ability', 'abilities')\n            this.#buildAbilities('check', 'checks')\n            this.#buildAbilities('save', 'saves')\n            this.#buildCombat()\n            this.#buildCounters()\n            this.#buildExhaustion()\n            this.#buildRests()\n            this.#buildSkills()\n            this.#buildUtility()\n        }\n\n        /**\n         * Build vehicle actions\n         * @private\n         * @returns {object}\n         */\n        async #buildVehicleActions () {\n            await Promise.all([\n                this.#buildConditions(),\n                this.#buildEffects(),\n                this.#buildFeatures(),\n                this.#buildInventory()\n            ])\n            this.#buildAbilities('ability', 'abilities')\n            this.#buildAbilities('check', 'checks')\n            this.#buildAbilities('save', 'saves')\n            this.#buildCombat()\n            this.#buildUtility()\n        }\n\n        /**\n         * Build multiple token actions\n         * @private\n         * @returns {object}\n         */\n        async #buildMultipleTokenActions () {\n            this.#buildAbilities('ability', 'abilities')\n            this.#buildAbilities('check', 'checks')\n            this.#buildAbilities('save', 'saves')\n            this.#buildCombat()\n            await this.#buildConditions()\n            this.#buildRests()\n            this.#buildSkills()\n            this.#buildUtility()\n        }\n\n        /**\n         * Build abilities\n         * @private\n         * @param {string} actionType\n         * @param {string} groupId\n         */\n        #buildAbilities (actionType, groupId) {\n        // Get abilities\n            const abilities = (!this.actor) ? CONFIG.ROTV.abilities : this.actor.system.abilities\n\n            // Exit if no abilities exist\n            if (abilities.length === 0) return\n\n            // Get actions\n            const actions = Object.entries(abilities)\n                .filter((ability) => abilities[ability[0]].value !== 0)\n                .map(([abilityId, ability]) => {\n                    const id = `${actionType}-${abilityId}`\n                    const abbreviatedName = abilityId.charAt(0).toUpperCase() + abilityId.slice(1)\n                    const label = CONFIG.ROTV.abilities[abilityId].label\n                    const name = this.abbreviateSkills ? abbreviatedName : label\n                    // Localise\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${label}`\n                    const encodedValue = [actionType, abilityId].join(this.delimiter)\n                    const icon1 = (groupId !== 'checks') ? this.#getProficiencyIcon(abilities[abilityId].proficient) : ''\n                    const mod = (groupId !== 'saves') ? ability?.mod : ((groupId === 'saves') ? ability?.save : '')\n                    const info1 = (this.actor) ? { text: coreModule.api.Utils.getModifier(mod) } : null\n                    const info2 = (this.actor && groupId === 'abilities') ? { text: `(${coreModule.api.Utils.getModifier(ability?.save)})` } : null\n                    return {\n                        id,\n                        name,\n                        encodedValue,\n                        icon1,\n                        info1,\n                        info2,\n                        listName\n                    }\n                })\n\n            // Create group data\n            const groupData = { id: groupId, type: 'system' }\n\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build activations\n         * @public\n         * @param {object} data  groupData, actionData, actionType\n         */\n        async buildActivations (data) {\n            const { groupData, actionData, actionType = 'item' } = data\n\n            // Create map of items according to activation type\n            const activationItems = new Map()\n\n            // Create activation type mappings\n            const activationTypeMappings = {\n                action: 'actions',\n                bonus: 'bonus-actions',\n                crew: 'crew-actions',\n                lair: 'lair-actions',\n                legendary: 'legendary-actions',\n                reaction: 'reactions',\n                reactiondamage: 'reactions',\n                reactionmanual: 'reactions',\n                other: 'other-actions'\n            }\n\n            // Loop through items\n            for (const [key, value] of actionData) {\n                const activationType = value.system?.activation?.type\n                const activationTypeOther = (Object.keys(activationTypeMappings).includes(activationType)) ? activationType : 'other'\n                const groupId = activationTypeMappings[activationTypeOther]\n                if (!activationItems.has(groupId)) activationItems.set(groupId, new Map())\n                activationItems.get(groupId).set(key, value)\n            }\n\n            // Loop through action group ids\n            for (const activationGroupId of this.activationgroupIds) {\n                // Skip if no items exist\n                if (!activationItems.has(activationGroupId)) continue\n\n                // Clone and add to group data\n                const groupDataClone = { ...groupData, id: `${activationGroupId}+${groupData.id}`, type: 'system-derived' }\n\n                // Set Equipped and Unequipped groups to not selected by default\n                if (['equipped', 'unequipped'].includes(groupData.id)) { groupDataClone.defaultSelected = false }\n\n                // Create parent group data\n                const parentgroupData = { id: activationGroupId, type: 'system' }\n\n                // Add group to HUD\n                await this.addGroup(groupDataClone, parentgroupData)\n\n                // Add spell slot info to group\n                if (actionType === 'spell') {\n                    this.addGroupInfo(groupDataClone)\n                }\n\n                const actionData = activationItems.get(activationGroupId)\n\n                // Build actions\n                await this.buildActions({ groupData: groupDataClone, actionData, actionType })\n            }\n        }\n\n        /**\n         * Build combat\n         * @private\n         */\n        #buildCombat () {\n            const actionType = 'utility'\n\n            // Set combat types\n            const combatTypes = {\n                initiative: { id: 'initiative', name: coreModule.api.Utils.i18n('tokenActionHud.rotv.rollInitiative') },\n                endTurn: { id: 'endTurn', name: coreModule.api.Utils.i18n('tokenActionHud.endTurn') }\n            }\n\n            // Delete endTurn for multiple tokens\n            if (game.combat?.current?.tokenId !== this.token?.id) delete combatTypes.endTurn\n\n            // Get actions\n            const actions = Object.entries(combatTypes).map((combatType) => {\n                const id = combatType[1].id\n                const name = combatType[1].name\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, id].join(this.delimiter)\n                const info1 = {}\n                let cssClass = ''\n                if (combatType[0] === 'initiative' && game.combat) {\n                    const tokens = coreModule.api.Utils.getControlledTokens()\n                    const tokenIds = tokens?.map((token) => token.id)\n                    const combatants = game.combat.combatants.filter((combatant) => tokenIds.includes(combatant.tokenId))\n\n                    // Get initiative for single token\n                    if (combatants.length === 1) {\n                        const currentInitiative = combatants[0].initiative\n                        info1.class = 'tah-spotlight'\n                        info1.text = currentInitiative\n                    }\n\n                    const active = combatants.length > 0 && (combatants.every((combatant) => combatant?.initiative)) ? ' active' : ''\n                    cssClass = `toggle${active}`\n                }\n                return {\n                    id,\n                    name,\n                    encodedValue,\n                    info1,\n                    cssClass,\n                    listName\n                }\n            })\n\n            // Create group data\n            const groupData = { id: 'combat', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build conditions\n         * @private\n         */\n        async #buildConditions () {\n            if (this.tokens?.length === 0) return\n\n            const actionType = 'condition'\n\n            // Get conditions\n            const conditions = CONFIG.statusEffects.filter((condition) => condition.id !== '')\n\n            // Exit if no conditions exist\n            if (conditions.length === 0) return\n\n            // Get actions\n            const actions = await Promise.all(conditions.map(async (condition) => {\n                const id = condition.id\n                const name = coreModule.api.Utils.i18n(condition.label) ?? condition.name\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, id].join(this.delimiter)\n                const active = this.actors.every((actor) => {\n                    if (game.version.startsWith('11')) {\n                        return actor.effects.some(effect => effect.statuses.some(status => status === id) && !effect?.disabled)\n                    } else {\n                        // V10\n                        return actor.effects.some(effect => effect.flags?.core?.statusId === id && !effect?.disabled)\n                    }\n                })\n                    ? ' active'\n                    : ''\n                const cssClass = `toggle${active}`\n                const img = coreModule.api.Utils.getImage(condition)\n                const tooltipData = await this.#getConditionTooltipData(id, name)\n                const tooltip = await this.#getTooltip(tooltipData)\n                return {\n                    id,\n                    name,\n                    encodedValue,\n                    img,\n                    cssClass,\n                    listName,\n                    tooltip\n                }\n            }))\n\n            // Create group data\n            const groupData = { id: 'conditions', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build counters\n         * @private\n         */\n        async #buildCounters () {\n            if (this.actorType !== 'character') return\n\n            const actionType = 'counter'\n\n            // Get counters\n            let counters = []\n\n            if (coreModule.api.Utils.isModuleActive('rotv-custom-counters')) {\n                if (this.actorType === 'character') {\n                    counters = Object.entries(game.settings.get('rotv-custom-counters', 'characterCounters'))\n                        .filter(([_, value]) => value.visible)\n                        .map(([key, value]) => {\n                            value.key = key\n                            return value\n                        })\n                } else {\n                    return\n                }\n            } else {\n                counters = [\n                    {\n                        name: coreModule.api.Utils.i18n('ROTV.DeathSave'),\n                        type: 'successFailure',\n                        system: true,\n                        visible: true,\n                        key: 'death-saves'\n                    },\n                    {\n                        name: coreModule.api.Utils.i18n('ROTV.Exhaustion'),\n                        type: 'number',\n                        system: true,\n                        visible: true,\n                        key: 'exhaustion'\n                    },\n                    {\n                        name: coreModule.api.Utils.i18n('ROTV.Inspiration'),\n                        type: 'checkbox',\n                        system: true,\n                        visible: true,\n                        key: 'inspiration'\n                    }\n                ]\n            }\n\n            // Get actions\n            const actions = counters.map(counter => {\n                const id = counter.key\n                const name = counter.name\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const value = (counter.system) ? id : encodeURIComponent(`${id}>${counter.type}`)\n                const encodedValue = [actionType, value].join(this.delimiter)\n                let active = ''\n                let cssClass = ''\n                let img = ''\n                let info1 = ''\n                if (counter.system) {\n                    switch (id) {\n                    case 'exhaustion':\n                        active = (this.actor.system.attributes.exhaustion > 0) ? ' active' : ''\n                        cssClass = `toggle${active}`\n                        img = coreModule.api.Utils.getImage('modules/token-action-hud-rotv/icons/exhaustion.svg')\n                        info1 = { text: this.actor.system.attributes.exhaustion }\n                        break\n                    case 'death-saves':\n                        img = coreModule.api.Utils.getImage('modules/token-action-hud-rotv/icons/death-saves.svg')\n                        info1 = { text: `${this.actor.system.attributes.death.success}/${this.actor.system.attributes.death.failure}` }\n                        break\n                    case 'inspiration':\n                        active = (this.actor.system.attributes.inspiration) ? ' active' : ''\n                        cssClass = `toggle${active}`\n                        img = coreModule.api.Utils.getImage('modules/token-action-hud-rotv/icons/inspiration.svg')\n                        break\n                    }\n                } else {\n                    const value = this.actor.getFlag('rotv-custom-counters', id)\n                    switch (counter.type) {\n                    case 'checkbox':\n                        active = (value) ? ' active' : ''\n                        cssClass = `toggle${active}`\n                        break\n                    case 'number':\n                        active = (value > 0) ? ' active' : ''\n                        cssClass = `toggle${active}`\n                        info1 = { text: value }\n                        break\n                    case 'successFailure':\n                        info1 = { text: `${value?.success ?? 0}/${value?.failure ?? 0}` }\n                        break\n                    }\n                }\n\n                return {\n                    id,\n                    name,\n                    listName,\n                    encodedValue,\n                    cssClass,\n                    img,\n                    info1\n                }\n            })\n\n            // Create group data\n            const groupData = { id: 'counters', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build effects\n         * @private\n         */\n        async #buildEffects () {\n            const actionType = 'effect'\n\n            // Get effects\n            const effects = new Map()\n            for (const effect of this.actor.allApplicableEffects()) {\n                effects.set(effect.id, effect)\n            }\n\n            // Exit if no effects exist\n            if (effects.size === 0) return\n\n            // Map passive and temporary effects to new maps\n            const passiveEffects = new Map()\n            const temporaryEffects = new Map()\n\n            // Iterate effects and add to a map based on the isTemporary value\n            for (const [effectId, effect] of effects.entries()) {\n                if (effect.isSuppressed || (effect.parent?.system?.identified === false && !game.user.isGM)) continue\n                const isTemporary = effect.isTemporary\n                if (isTemporary) {\n                    temporaryEffects.set(effectId, effect)\n                } else {\n                    passiveEffects.set(effectId, effect)\n                }\n            }\n\n            await Promise.all([\n                // Build passive effects\n                this.buildActions({ groupData: { id: 'passive-effects', type: 'system' }, actionData: passiveEffects, actionType }),\n                // Build temporary effects\n                this.buildActions({ groupData: { id: 'temporary-effects', type: 'system' }, actionData: temporaryEffects, actionType })\n            ])\n        }\n\n        /**\n         * Build exhaustion\n         * @private\n         */\n        #buildExhaustion () {\n            // Exit if every actor is not the character type\n            if (this.actors.length === 0) return\n            if (!this.actors.every(actor => actor.type === 'character')) return\n\n            const actionType = 'exhaustion'\n\n            const id = 'exhaustion'\n            const name = coreModule.api.Utils.i18n('ROTV.Exhaustion')\n            const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n            const listName = `${actionTypeName}${name}`\n            const encodedValue = [actionType, id].join(this.delimiter)\n            const img = coreModule.api.Utils.getImage('modules/token-action-hud-rotv/icons/exhaustion.svg')\n            const info1 = { text: this.actor.system.attributes.exhaustion }\n            let cssClass = ''\n            const active = this.actor.system.attributes.exhaustion > 0\n                ? ' active'\n                : ''\n            cssClass = `toggle${active}`\n\n            // Get actions\n            const actions = [{\n                cssClass,\n                id,\n                name,\n                encodedValue,\n                img,\n                info1,\n                listName\n            }]\n\n            // Create group data\n            const groupData = { id: 'exhaustion', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build features\n         * @private\n         */\n        async #buildFeatures () {\n            const actionType = 'feature'\n\n            // Get feats\n            const feats = new Map()\n            for (const [key, value] of this.items) {\n                const type = value.type\n                if (type === 'feat') feats.set(key, value)\n            }\n\n            // Early exit if no feats exist\n            if (feats.size === 0) return\n\n            // Map active and passive features to new maps\n            const featuresMap = new Map()\n\n            const featureTypes = [\n                { type: 'background', groupId: 'background-features' },\n                { type: 'class', groupId: 'class-features' },\n                { type: 'monster', groupId: 'monster-features' },\n                { type: 'race', groupId: 'race-features' },\n                { type: 'feats', groupId: 'feats' }\n            ]\n\n            const classFeatureTypes = [\n                { type: 'artificerInfusion', groupId: 'artificer-infusions' },\n                { type: 'channelDivinity', groupId: 'channel-divinity' },\n                { type: 'defensiveTactic', groupId: 'defensive-tactics' },\n                { type: 'eldritchInvocation', groupId: 'eldritch-invocations' },\n                { type: 'elementalDiscipline', groupId: 'elemental-disciplines' },\n                { type: 'fightingStyle', groupId: 'fighting-styles' },\n                { type: 'huntersPrey', groupId: 'hunters-prey' },\n                { type: 'ki', groupId: 'ki-abilities' },\n                { type: 'maneuver', groupId: 'maneuvers' },\n                { type: 'metamagic', groupId: 'metamagic-options' },\n                { type: 'multiattack', groupId: 'multiattacks' },\n                { type: 'pact', groupId: 'pact-boons' },\n                { type: 'psionicPower', groupId: 'psionic-powers' },\n                { type: 'rune', groupId: 'runes' },\n                { type: 'superiorHuntersDefense', groupId: 'superior-hunters-defense' }\n            ]\n\n            for (const [key, value] of feats) {\n                const activationType = value.system.activation?.type\n                const type = value.system.type.value\n                const subType = value.system.type?.subtype\n                if (activationType) {\n                    if (!featuresMap.has('active-features')) featuresMap.set('active-features', new Map())\n                    featuresMap.get('active-features').set(key, value)\n                }\n                if (!activationType || activationType === '') {\n                    if (!featuresMap.has('passive-features')) featuresMap.set('passive-features', new Map())\n                    featuresMap.get('passive-features').set(key, value)\n                }\n                for (const featureType of featureTypes) {\n                    const groupId = featureType.groupId\n                    if (featureType.type === type) {\n                        if (!featuresMap.has(groupId)) featuresMap.set(groupId, new Map())\n                        featuresMap.get(groupId).set(key, value)\n                    }\n                }\n                for (const featureType of classFeatureTypes) {\n                    const groupId = featureType.groupId\n                    if (subType && featureType.type === subType) {\n                        if (!featuresMap.has(groupId)) featuresMap.set(groupId, new Map())\n                        featuresMap.get(groupId).set(key, value)\n                    }\n                }\n            }\n\n            // Create group name mappings\n            const groupNameMappings = {\n                'active-features': coreModule.api.Utils.i18n('tokenActionHud.rotv.activeFeatures'),\n                'passive-features': coreModule.api.Utils.i18n('tokenActionHud.rotv.passiveFeatures')\n            }\n\n            // Loop through inventory groups ids\n            for (const groupId of this.featuregroupIds) {\n                if (!featuresMap.has(groupId)) continue\n\n                // Create group data\n                const groupData = {\n                    id: groupId,\n                    name: groupNameMappings[groupId] ?? '',\n                    type: 'system'\n                }\n\n                const actionData = featuresMap.get(groupId)\n                const data = { groupData, actionData, actionType }\n\n                // Build actions\n                await this.buildActions(data)\n\n                // Build activations\n                if (groupNameMappings[groupId]) await this.buildActivations(data)\n            }\n        }\n\n        /**\n         * Build inventory\n         * @private\n         */\n        async #buildInventory () {\n        // Exit early if no items exist\n            if (this.items.size === 0) return\n\n            const inventoryMap = new Map()\n\n            for (const [key, value] of this.items) {\n            // Set variables\n                const equipped = value.system.equipped\n                const hasQuantity = value.system?.quantity > 0\n                const isActiveItem = this.#isActiveItem(value)\n                const isUsableItem = this.#isUsableItem(value)\n                const isEquippedItem = this.#isEquippedItem(value)\n                const type = value.type\n\n                // Set items into maps\n                if (hasQuantity && isActiveItem) {\n                    if (equipped) {\n                        if (!inventoryMap.has('equipped')) inventoryMap.set('equipped', new Map())\n                        inventoryMap.get('equipped').set(key, value)\n                    }\n                    if (!equipped) {\n                        if (!inventoryMap.has('unequipped')) inventoryMap.set('unequipped', new Map())\n                        inventoryMap.get('unequipped').set(key, value)\n                    }\n                    if (isUsableItem && type === 'consumable') {\n                        if (!inventoryMap.has('consumables')) inventoryMap.set('consumables', new Map())\n                        inventoryMap.get('consumables').set(key, value)\n                    }\n                    if (isEquippedItem) {\n                        if (type === 'container') {\n                            if (!inventoryMap.has('containers')) inventoryMap.set('containers', new Map())\n                            inventoryMap.get('containers').set(key, value)\n                        }\n                        if (type === 'equipment') {\n                            if (!inventoryMap.has('equipment')) inventoryMap.set('equipment', new Map())\n                            inventoryMap.get('equipment').set(key, value)\n                        }\n                        if (type === 'loot') {\n                            if (!inventoryMap.has('loot')) inventoryMap.set('loot', new Map())\n                            inventoryMap.get('loot').set(key, value)\n                        }\n                        if (type === 'tool') {\n                            if (!inventoryMap.has('tools')) inventoryMap.set('tools', new Map())\n                            inventoryMap.get('tools').set(key, value)\n                        }\n                        if (type === 'weapon') {\n                            if (!inventoryMap.has('weapons')) inventoryMap.set('weapons', new Map())\n                            inventoryMap.get('weapons').set(key, value)\n                        }\n                    }\n                }\n            }\n\n            // Create group name mappings\n            const groupNameMappings = {\n                equipped: coreModule.api.Utils.i18n('ROTV.Equipped'),\n                unequipped: coreModule.api.Utils.i18n('ROTV.Unequipped'),\n                consumables: coreModule.api.Utils.i18n('ITEM.TypeConsumablePl'),\n                containers: coreModule.api.Utils.i18n('ITEM.TypeContainerPl'),\n                equipment: coreModule.api.Utils.i18n('ITEM.TypeEquipmentPl'),\n                loot: coreModule.api.Utils.i18n('ITEM.TypeLootPl'),\n                tools: coreModule.api.Utils.i18n('ITEM.TypeToolPl'),\n                weapons: coreModule.api.Utils.i18n('ITEM.TypeWeaponPl')\n            }\n\n            // Loop through inventory subcateogry ids\n            for (const groupId of this.inventorygroupIds) {\n                if (!inventoryMap.has(groupId)) continue\n\n                // Create group data\n                const groupData = {\n                    id: groupId,\n                    name: groupNameMappings[groupId],\n                    type: 'system'\n                }\n\n                const actionData = inventoryMap.get(groupId)\n                const data = { groupData, actionData }\n\n                // Build actions\n                await this.buildActions(data)\n\n                // Build activations\n                if (this.activationgroupIds) {\n                    await this.buildActivations(data)\n                }\n            }\n        }\n\n        /**\n         * Build rests\n         * @private\n         */\n        #buildRests () {\n            // Exit if every actor is not the character type\n            if (this.actors.length === 0) return\n            if (!this.actors.every(actor => actor.type === 'character')) return\n\n            const actionType = 'utility'\n\n            // Set rest types\n            const restTypes = {\n                shortRest: { name: coreModule.api.Utils.i18n('ROTV.ShortRest') },\n                longRest: { name: coreModule.api.Utils.i18n('ROTV.LongRest') }\n            }\n\n            // Get actions\n            const actions = Object.entries(restTypes)\n                .map((restType) => {\n                    const id = restType[0]\n                    const name = restType[1].name\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${name}`\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    return {\n                        id,\n                        name,\n                        encodedValue,\n                        listName\n                    }\n                })\n\n            // Create group data\n            const groupData = { id: 'rests', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build skills\n         * @private\n         */\n        #buildSkills () {\n            const actionType = 'skill'\n\n            // Get skills\n            const skills = (!this.actor) ? CONFIG.ROTV.skills : this.actor.system.skills\n\n            // Exit if there are no skills\n            if (skills.length === 0) return\n\n            // Get actions\n            const actions = Object.entries(skills)\n                .map((skill) => {\n                    try {\n                        const id = skill[0]\n                        const abbreviatedName = id.charAt(0).toUpperCase() + id.slice(1)\n                        const name = this.abbreviateSkills ? abbreviatedName : CONFIG.ROTV.skills[id].label\n                        const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                        const listName = `${actionTypeName}${CONFIG.ROTV.skills[id].label}`\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const icon1 = this.#getProficiencyIcon(skills[id].value)\n                        const mod = skills[id].total\n                        const info1 = (this.actor) ? { text: (mod || mod === 0) ? `${(mod >= 0) ? '+' : ''}${mod}` : '' } : ''\n                        return {\n                            id,\n                            name,\n                            encodedValue,\n                            icon1,\n                            info1,\n                            listName\n                        }\n                    } catch (error) {\n                        coreModule.api.Logger.error(skill)\n                        return null\n                    }\n                })\n                .filter((skill) => !!skill)\n\n            // Create group data\n            const groupData = { id: 'skills', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build spells\n         */\n        async #buildSpells () {\n            const actionType = 'spell'\n\n            const spellsMap = new Map()\n\n            // Loop through items\n            for (const [key, value] of this.items) {\n                const type = value.type\n                if (type === 'spell') {\n                    const isUsableItem = this.#isUsableItem(value)\n                    const isUsableSpell = this.#isUsableSpell(value)\n                    if (isUsableItem && isUsableSpell) {\n                        const preparationMode = value.system.preparation.mode\n                        switch (preparationMode) {\n                        case 'atwill':\n                            if (!spellsMap.has('at-will-spells')) spellsMap.set('at-will-spells', new Map())\n                            spellsMap.get('at-will-spells').set(key, value)\n                            break\n                        case 'innate':\n                            if (!spellsMap.has('innate-spells')) spellsMap.set('innate-spells', new Map())\n                            spellsMap.get('innate-spells').set(key, value)\n                            break\n                        case 'pact':\n                            if (!spellsMap.has('pact-spells')) spellsMap.set('pact-spells', new Map())\n                            spellsMap.get('pact-spells').set(key, value)\n                            break\n                        default:\n                        { const level = value.system.level\n                            switch (level) {\n                            case 0:\n                                if (!spellsMap.has('cantrips')) spellsMap.set('cantrips', new Map())\n                                spellsMap.get('cantrips').set(key, value)\n                                break\n                            case 1:\n                                if (!spellsMap.has('1st-level-spells')) spellsMap.set('1st-level-spells', new Map())\n                                spellsMap.get('1st-level-spells').set(key, value)\n                                break\n                            case 2:\n                                if (!spellsMap.has('2nd-level-spells')) spellsMap.set('2nd-level-spells', new Map())\n                                spellsMap.get('2nd-level-spells').set(key, value)\n                                break\n                            case 3:\n                                if (!spellsMap.has('3rd-level-spells')) spellsMap.set('3rd-level-spells', new Map())\n                                spellsMap.get('3rd-level-spells').set(key, value)\n                                break\n                            case 4:\n                                if (!spellsMap.has('4th-level-spells')) spellsMap.set('4th-level-spells', new Map())\n                                spellsMap.get('4th-level-spells').set(key, value)\n                                break\n                            case 5:\n                                if (!spellsMap.has('5th-level-spells')) spellsMap.set('5th-level-spells', new Map())\n                                spellsMap.get('5th-level-spells').set(key, value)\n                                break\n                            case 6:\n                                if (!spellsMap.has('6th-level-spells')) spellsMap.set('6th-level-spells', new Map())\n                                spellsMap.get('6th-level-spells').set(key, value)\n                                break\n                            case 7:\n                                if (!spellsMap.has('7th-level-spells')) spellsMap.set('7th-level-spells', new Map())\n                                spellsMap.get('7th-level-spells').set(key, value)\n                                break\n                            case 8:\n                                if (!spellsMap.has('8th-level-spells')) spellsMap.set('8th-level-spells', new Map())\n                                spellsMap.get('8th-level-spells').set(key, value)\n                                break\n                            case 9:\n                                if (!spellsMap.has('9th-level-spells')) spellsMap.set('9th-level-spells', new Map())\n                                spellsMap.get('9th-level-spells').set(key, value)\n                                break\n                            }\n                        }\n                        }\n                    }\n                }\n            }\n\n            // Reverse sort spell slots by level\n            const systemSpells = Object.entries(this.actor.system.spells).reverse()\n\n            // Set spell slot availability\n            let pactSlot = null\n            const spellSlots = []\n            let spellSlotAvailable = this.showUnchargedItems\n            let pactSlotAvailable = this.showUnchargedItems\n            for (const [key, value] of systemSpells) {\n                const hasValue = value.value > 0\n                const hasMax = value.max > 0\n                const hasLevel = value.level > 0\n                if (key === 'pact') {\n                    if (!pactSlotAvailable && hasValue && hasMax && hasLevel) pactSlotAvailable = true\n                    if (!hasLevel) pactSlotAvailable = false\n                    value.slotAvailable = pactSlotAvailable\n                    pactSlot = [key, value]\n                }\n                if (key.startsWith('spell') && key !== 'spell0') {\n                    if (!spellSlotAvailable && hasValue && hasMax) spellSlotAvailable = true\n                    value.slotAvailable = spellSlotAvailable\n                    spellSlots.push([key, value])\n                } else {\n                    if (hasValue) {\n                        value.slotsAvailable = true\n                        spellSlots.push(key, value)\n                    }\n                }\n            }\n\n            // Set equivalent spell slot where pact slot is available\n            if (pactSlot[1].slotAvailable) {\n                const pactSpellEquivalent = spellSlots.findIndex(spell => spell[0] === 'spell' + pactSlot[1].level)\n                spellSlots[pactSpellEquivalent][1].slotsAvailable = true\n            }\n\n            const groupMappings = {\n                '1st-level-spells': { spellMode: 1, name: coreModule.api.Utils.i18n('tokenActionHud.rotv.1stLevelSpells') },\n                '2nd-level-spells': { spellMode: 2, name: coreModule.api.Utils.i18n('tokenActionHud.rotv.2ndLevelSpells') },\n                '3rd-level-spells': { spellMode: 3, name: coreModule.api.Utils.i18n('tokenActionHud.rotv.3rdLevelSpells') },\n                '4th-level-spells': { spellMode: 4, name: coreModule.api.Utils.i18n('tokenActionHud.rotv.4thLevelSpells') },\n                '5th-level-spells': { spellMode: 5, name: coreModule.api.Utils.i18n('tokenActionHud.rotv.5thLevelSpells') },\n                '6th-level-spells': { spellMode: 6, name: coreModule.api.Utils.i18n('tokenActionHud.rotv.6thLevelSpells') },\n                '7th-level-spells': { spellMode: 7, name: coreModule.api.Utils.i18n('tokenActionHud.rotv.7thLevelSpells') },\n                '8th-level-spells': { spellMode: 8, name: coreModule.api.Utils.i18n('tokenActionHud.rotv.8thLevelSpells') },\n                '9th-level-spells': { spellMode: 9, name: coreModule.api.Utils.i18n('tokenActionHud.rotv.9thLevelSpells') },\n                'at-will-spells': { spellMode: 'atwill', name: coreModule.api.Utils.i18n('tokenActionHud.rotv.atWillSpells') },\n                cantrips: { spellMode: 0, name: coreModule.api.Utils.i18n('tokenActionHud.rotv.cantrips') },\n                'innate-spells': { spellMode: 'innate', name: coreModule.api.Utils.i18n('tokenActionHud.rotv.innateSpells') },\n                'pact-spells': { spellMode: 'pact', name: coreModule.api.Utils.i18n('tokenActionHud.rotv.pactSpells') }\n            }\n\n            const spellSlotModes = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'pact']\n\n            for (const groupId of this.spellgroupIds) {\n                const spellMode = groupMappings[groupId].spellMode\n                const groupName = groupMappings[groupId].name\n\n                // Skip if no spells exist\n                if (!spellsMap.has(groupId)) continue\n\n                const levelInfo = (spellMode === 'pact') ? pactSlot[1] : spellSlots.find(spellSlot => spellSlot[0] === `spell${spellMode}`)?.[1]\n                const slots = levelInfo?.value\n                const max = levelInfo?.max\n                const slotsAvailable = levelInfo?.slotAvailable\n\n                // Skip if spells require spell slots and none are available\n                if (!slotsAvailable && spellSlotModes.includes(spellMode)) continue\n\n                // Create group data=\n                const groupInfo = {}\n                groupInfo.info1 = { class: 'tah-spotlight', text: (max >= 0) ? `${slots}/${max}` : '' }\n                const groupData = {\n                    id: groupId,\n                    name: groupName,\n                    type: 'system',\n                    info: groupInfo\n                }\n\n                // Add spell slot info to group\n                this.addGroupInfo(groupData)\n\n                const actionData = spellsMap.get(groupId)\n                const data = { groupData, actionData, actionType }\n\n                // Build actions\n                await this.buildActions(data)\n\n                // Build activations\n                if (this.activationgroupIds) { await this.buildActivations(data) }\n            }\n        }\n\n        /**\n         * Build utility\n         * @private\n         */\n        #buildUtility () {\n            // Exit if every actor is not the character type\n            if (this.actors.length === 0) return\n            if (!this.actors.every((actor) => actor.type === 'character')) return\n\n            const actionType = 'utility'\n\n            // Set utility types\n            const utilityTypes = {\n                deathSave: { name: coreModule.api.Utils.i18n('ROTV.DeathSave') },\n                inspiration: { name: coreModule.api.Utils.i18n('ROTV.Inspiration') }\n            }\n\n            // Delete 'deathSave' for multiple tokens\n            if (!this.actor || this.actor.system.attributes.hp.value > 0) delete utilityTypes.deathSave\n\n            // Get actions\n            const actions = Object.entries(utilityTypes)\n                .map((utilityType) => {\n                    const id = utilityType[0]\n                    const name = utilityType[1].name\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${name}`\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    let cssClass = ''\n                    if (utilityType[0] === 'inspiration') {\n                        const active = this.actors.every((actor) => actor.system.attributes?.inspiration)\n                            ? ' active'\n                            : ''\n                        cssClass = `toggle${active}`\n                    }\n                    return {\n                        id,\n                        name,\n                        encodedValue,\n                        cssClass,\n                        listName\n                    }\n                })\n\n            // Crreate group data\n            const groupData = { id: 'utility', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build actions\n         * @public\n         * @param {object} data actionData, groupData, actionType\n         * @param {object} options\n         */\n        async buildActions (data, options) {\n            const { actionData, groupData, actionType } = data\n\n            // Exit if there is no action data\n            if (actionData.size === 0) return\n\n            // Exit if there is no groupId\n            const groupId = (typeof groupData === 'string' ? groupData : groupData?.id)\n            if (!groupId) return\n\n            // Get actions\n            const actions = await Promise.all([...actionData].map(async item => await this.#getAction(actionType, item[1])))\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Get action\n         * @private\n         * @param {string} actionType\n         * @param {object} entity\n         * @param {object} options\n         * @returns {object}\n         */\n        async #getAction (actionType = 'item', entity) {\n            const id = entity.id ?? entity._id\n            let name = entity?.name ?? entity?.label\n            if (\n                entity?.system?.recharge &&\n                !entity?.system?.recharge?.charged &&\n                entity?.system?.recharge?.value\n            ) {\n                name += ` (${coreModule.api.Utils.i18n('ROTV.Recharge')})`\n            }\n            const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n            const listName = `${actionTypeName}${name}`\n            let cssClass = ''\n            if (Object.hasOwn(entity, 'disabled')) {\n                const active = (!entity.disabled) ? ' active' : ''\n                cssClass = `toggle${active}`\n            }\n            const encodedValue = [actionType, id].join(this.delimiter)\n            const img = coreModule.api.Utils.getImage(entity)\n            const icon1 = this.#getActivationTypeIcon(entity?.system?.activation?.type)\n            const icon2 = this.#getPreparedIcon(entity)\n            const icon3 = this.#getConcentrationIcon(entity)\n            const info = this.#getItemInfo(entity)\n            const info1 = info?.info1\n            const info2 = info?.info2\n            const info3 = info?.info3\n            const tooltipData = await this.#getTooltipData(entity)\n            const tooltip = await this.#getTooltip(tooltipData)\n            return {\n                id,\n                name,\n                encodedValue,\n                cssClass,\n                img,\n                icon1,\n                icon2,\n                icon3,\n                info1,\n                info2,\n                info3,\n                listName,\n                tooltip\n            }\n        }\n\n        /**\n         * Is active item\n         * @param {object} item\n         * @returns {boolean}\n         */\n        #isActiveItem (item) {\n            if (this.showItemsWithoutActivationCosts) return true\n            const activationTypes = Object.keys(CONFIG.ROTV.abilityActivationTypes).filter((at) => at !== 'none')\n            const activation = item.system.activation\n            const activationType = activation?.type\n            if ((activation && activationTypes.includes(activationType)) || item.type === 'tool') return true\n            return false\n        }\n\n        /**\n         * Is equipped item\n         * @private\n         * @param {object} item\n         * @returns {boolean}\n         */\n        #isEquippedItem (item) {\n            const type = item.type\n            const excludedTypes = ['consumable', 'spell', 'feat']\n            if (this.showUnequippedItems && !excludedTypes.includes(type)) return true\n            const equipped = item.system.equipped\n            if (equipped && type !== 'consumable') return true\n            return false\n        }\n\n        /**\n         * Is usable item\n         * @private\n         * @param {object} item The item\n         * @returns {boolean}\n         */\n        #isUsableItem (item) {\n            if (this.showUnchargedItems) return true\n            const uses = item.system.uses\n            if (!uses) return false\n            return true\n        }\n\n        /**\n         * Is usable spell\n         * @param {object} spell  The spell\n         * @returns {boolean}\n         */\n        #isUsableSpell (spell) {\n            if (this.actorType !== 'character' && this.showUnequippedItems) return true\n            const prepared = spell.system.preparation.prepared\n            if (this.showUnpreparedSpells) return true\n            // Set variables\n            const level = spell.system.level\n            const preparationModes = Object.keys(CONFIG.ROTV.spellPreparationModes)\n                .filter(preparationMode => preparationMode !== 'prepared')\n            const preparationMode = spell.system.preparation.mode\n\n            // Return true if spell is a cantrip, has a preparation mode other than 'prepared' or is prepared\n            if (level === 0 || preparationModes.includes(preparationMode) || prepared) return true\n            return false\n        }\n\n        /**\n         * Get item info\n         * @private\n         * @param {object} item\n         * @returns {object}\n         */\n        #getItemInfo (item) {\n            const info1 = item.type === 'spell' ? this.#getSpellInfo(item) : this.#getQuantityData(item)\n            const uses = this.#getUsesData(item)\n            const consume = this.#getConsumeData(item)\n\n            const info2 = {\n                text: `${uses.text ?? ''} ${consume.text ?? ''}`,\n                title: \"Uses and consume\"\n            }\n\n            const info3 = this.#getRangeData(item)\n\n            return { info1, info2, info3 }\n        }\n\n        /**\n         * Add spell info\n         * @param {object} spell\n         */\n        #getSpellInfo (spell) {\n            if (!this.displaySpellInfo) return null\n            const info = { text: '' }\n            const componentsArray = []\n            const components = spell.system?.properties\n            const componentTypes = [\n                ['vocal', 'ROTV.ComponentVerbal'],\n                ['somatic', 'ROTV.ComponentSomatic'],\n                ['material', 'ROTV.ComponentMaterial']\n            ]\n            componentTypes.forEach(component => {\n                if (components?.has(component[0])) {\n                    componentsArray.push(coreModule.api.Utils.i18n(component[1]))\n                    info.text += coreModule.api.Utils.i18n(`${component[1]}Abbr`)\n                }\n            })\n\n            // Ritual\n            if (components?.has('ritual')) {\n                componentsArray.push(`[${coreModule.api.Utils.i18n('ROTV.Ritual')}]`)\n                info.text += ` [${coreModule.api.Utils.i18n('ROTV.RitualAbbr')}]`\n            }\n\n            info.title = componentsArray.join(', ')\n\n            return info\n        }\n\n        /**\n         * Get actors\n         * @private\n         * @returns {object}\n         */\n        #getActors () {\n            const allowedTypes = ['character', 'npc']\n            const tokens = coreModule.api.Utils.getControlledTokens()\n            const actors = tokens?.filter(token => token.actor).map((token) => token.actor)\n            if (actors.every((actor) => allowedTypes.includes(actor.type))) {\n                return actors\n            } else {\n                return []\n            }\n        }\n\n        /**\n         * Get tokens\n         * @private\n         * @returns {object}\n         */\n        #getTokens () {\n            const allowedTypes = ['character', 'npc']\n            const tokens = coreModule.api.Utils.getControlledTokens()\n            const actors = tokens?.filter(token => token.actor).map((token) => token.actor)\n            if (actors.every((actor) => allowedTypes.includes(actor.type))) {\n                return tokens\n            } else {\n                return []\n            }\n        }\n\n        /**\n         * Get quantity\n         * @private\n         * @param {object} item\n         * @returns {string}\n         */\n        #getQuantityData (item) {\n            const quantity = item?.system?.quantity ?? 0\n            return {\n                text: (quantity > 1) ? quantity + ' left' : '',\n                title: `${coreModule.api.Utils.i18n('ROTV.Quantity')}: ${quantity}`\n            }\n        }\n\n        /**\n         * Get uses\n         * @private\n         * @param {object} item\n         * @param {string} consumeName\n         * @param {integer} consumeAmount\n         * @returns {string}\n         */\n        #getUsesData (item, consumeName, consumeAmount) {\n            const uses = item?.system?.uses\n            if (uses?.per && (consumeName || uses?.prompt) && (uses.value > 0 || uses.max > 0)) {\n                const of = coreModule.api.Utils.i18n('ROTV.of')\n                const per = uses.per === 'charges' ? '' : ` ${coreModule.api.Utils.i18n('ROTV.per')}`\n                const period = CONFIG.ROTV.limitedUsePeriods[uses.per]?.label ?? uses.per\n                const amount = consumeAmount !== undefined ? consumeAmount : uses.amount\n                const text = `${amount > 1 ? `${amount} ${of} ` : ''}${uses.value ?? '0'}${uses.max > 0 ? `/${uses.max} charges` : ''}`\n                const title = `${text}${per} ${period}${consumeName ? ` (${of} ${consumeName})` : ''}`\n                return { text, title }\n            }\n            return {}\n        }\n\n        /**\n         * Get consume\n         * @private\n         * @param {object} item\n         * @param {object} actor\n         * @returns {string}\n         */\n        #getConsumeData (item) {\n        // Get consume target and type\n            const consumeId = item?.system?.consume?.target\n            const consumeType = item?.system?.consume?.type\n            const consumeAmount = item?.system?.consume?.amount\n\n            if (!consumeId || !consumeType || consumeId === item.id) return {}\n\n            // Return resources\n            if (consumeType === 'attribute') {\n                const parentId = consumeId.substr(0, consumeId.lastIndexOf('.'))\n                const target = foundry.utils.getProperty(this.actor.system, parentId)\n\n                if (target) {\n                    const text = `${target.value ?? '0'}${target.max ? `/${target.max} mag` : ''}`\n                    return {\n                        text,\n                        title: `${text} ${target.label ?? ''}`\n                    }\n                }\n            } else {\n                const target = this.actor.items?.get(consumeId)\n\n                // Return charges\n                if (target && consumeType === 'charges') {\n                    return this.#getUsesData(target, target.name, consumeAmount)\n                }\n\n                // Return quantity\n                if (target?.system?.quantity) {\n                    const text = `${consumeAmount > 1 ? `${consumeAmount} ${coreModule.api.Utils.i18n('ROTV.of')} ` : ''}${target.system.quantity}`\n                    return {\n                        text,\n                        title: `${text} ${target.name}`\n                    }\n                }\n            }\n\n            return {}\n        }\n\n\n\n        /** @private */\n        #getRangeData(item) {\n            let quantity = item?.system?.range?.value;\n            if (quantity > 1) {\n                return {\n                      text: quantity + \" sq.\",\n                      title: \"range\"\n                                    }\n            }\n\n            return {} ;\n        }\n\n        /**\n         * Discard slow items\n         * @private\n         * @param {object} items\n         * @returns {object}\n         */\n        #discardSlowItems (items) {\n            // Get setting\n            const showSlowActions = Utils.getSetting('showSlowActions')\n\n            // Return all items\n            if (showSlowActions) return items\n\n            // Return filtered items\n            const slowActivationTypes = ['minute', 'hour', 'day']\n\n            // Initialize map\n            const filteredItems = new Map()\n\n            // Loop items and set those with fast activation types into the new map\n            for (const [key, value] of items.entries()) {\n                const activationType = value.system?.activation?.type\n                if (!slowActivationTypes.includes(activationType)) filteredItems.set(key, value)\n            }\n\n            return filteredItems\n        }\n\n        /**\n         * Get proficiency icon\n         * @param {string} level\n         * @returns {string}\n         */\n        #getProficiencyIcon (level) {\n            const title = CONFIG.ROTV.proficiencyLevels[level] ?? ''\n            const icon = PROFICIENCY_LEVEL_ICON[level]\n            if (icon) return `<i class=\"${icon}\" title=\"${title}\"></i>`\n        }\n\n        /**\n         * Get icon for the activation type\n         * @private\n         * @param {object} activationType\n         * @returns {string}\n         */\n        #getActivationTypeIcon (activationType) {\n            const title = CONFIG.ROTV.abilityActivationTypes[activationType] ?? ''\n            const icon = ACTIVATION_TYPE_ICON[activationType]\n            if (icon) return `<i class=\"${icon}\" title=\"${title}\"></i>`\n        }\n\n        /**\n         * Get icon for concentration type\n         * @private\n         * @param {object} spell\n         * @returns {string}\n         */\n        #getConcentrationIcon (spell) {\n            if (spell?.type !== 'spell' || !this.displaySpellInfo || !spell.system?.properties?.has('concentration')) return null\n            const title = coreModule.api.Utils.i18n('ROTV.Scroll.RequiresConcentration')\n            const icon = CONCENTRATION_ICON\n            return `<rotv-icon src=\"${icon}\" title=\"${title}\">`\n        }\n\n        /**\n         * Get icon for a prepared spell\n         * @private\n         * @param {object} spell\n         * @returns\n         */\n        #getPreparedIcon (spell) {\n            if (spell?.type !== 'spell' || !this.showUnpreparedSpells) return null\n            const level = spell.system.level\n            const preparationMode = spell.system.preparation.mode\n            const prepared = spell.system.preparation.prepared\n            const icon = prepared ? PREPARED_ICON : `${PREPARED_ICON} tah-icon-disabled`\n            const title = preparationMode === 'always' ? coreModule.api.Utils.i18n('ROTV.SpellPrepAlways') : prepared ? coreModule.api.Utils.i18n('ROTV.SpellPrepared') : coreModule.api.Utils.i18n('ROTV.SpellUnprepared')\n\n            // Return icon if the preparation mode is 'prepared' or 'always' and the spell is not a cantrip\n            return ((preparationMode === 'prepared' || preparationMode === 'always') && level !== 0) ? `<i class=\"${icon}\" title=\"${title}\"></i>` : null\n        }\n\n        async #getTooltipData (entity) {\n            if (this.tooltipsSetting === 'none') return ''\n\n            const name = entity?.name ?? ''\n\n            if (this.tooltipsSetting === 'nameOnly') return name\n\n            const unidentified = entity.system?.identified === false\n            const description = (typeof entity?.system?.description === 'string') ? entity?.system?.description : (unidentified ? entity?.system?.unidentified?.description : entity?.system?.description?.value) ?? ''\n            let modifiers, properties, rarity, traits\n            if (!unidentified) {\n                modifiers = entity?.modifiers ?? null\n                properties = [\n                    ...entity.system?.chatProperties ?? [],\n                    ...entity.system?.equippableItemCardProperties ?? [],\n                    ...entity.system?.activatedEffectCardProperties ?? []\n                ].filter(p => p)\n                rarity = unidentified ? null : entity?.rarity ?? null\n                traits = (entity?.type === 'weapon') ? this.#getWeaponProperties(entity?.system?.properties) : null\n            }\n            return { name, description, modifiers, properties, rarity, traits }\n        }\n\n        /**\n         * Get condition tooltip data\n         * @param {*} id     The condition id\n         * @param {*} name   The condition name\n         * @returns {object} The tooltip data\n         */\n        async #getConditionTooltipData (id, name) {\n            if (this.tooltipsSetting === 'none') return ''\n            if (this.tooltipsSetting === 'nameOnly') return name\n\n            const journalEntry = (CONDITION[id]) ? (CONDITION[id]?.uuid) ? await fromUuid(CONDITION[id].uuid) : null : null\n            const description = journalEntry?.text?.content ?? ''\n            const relativeTo = journalEntry\n            return {\n                name,\n                description,\n                relativeTo\n            }\n        }\n\n        /**\n         * Get tooltip\n         * @param {object} tooltipData The tooltip data\n         * @returns {string}           The tooltip\n         */\n        async #getTooltip (tooltipData) {\n            if (this.tooltipsSetting === 'none') return ''\n            if (typeof tooltipData === 'string') return tooltipData\n\n            const name = coreModule.api.Utils.i18n(tooltipData.name)\n\n            if (this.tooltipsSetting === 'nameOnly') return name\n\n            const nameHtml = `<h3>${name}</h3>`\n\n            const relativeTo = tooltipData.relativeTo ?? this.actor\n\n            const description = tooltipData?.descriptionLocalised ??\n                await TextEditor.enrichHTML(coreModule.api.Utils.i18n(tooltipData?.description ?? ''), { async: true, relativeTo, secrets: true })\n\n            const rarityHtml = tooltipData?.rarity\n                ? `<span class=\"tah-tag ${tooltipData.rarity}\">${coreModule.api.Utils.i18n(RARITY[tooltipData.rarity])}</span>`\n                : ''\n\n            const propertiesHtml = tooltipData?.properties\n                ? `<div class=\"tah-properties\">${tooltipData.properties.map(property => `<span class=\"tah-property\">${coreModule.api.Utils.i18n(property)}</span>`).join('')}</div>`\n                : ''\n\n            const traitsHtml = tooltipData?.traits\n                ? tooltipData.traits.map(trait => `<span class=\"tah-tag\">${coreModule.api.Utils.i18n(trait.label ?? trait)}</span>`).join('')\n                : ''\n\n            const traits2Html = tooltipData?.traits2\n                ? tooltipData.traits2.map(trait => `<span class=\"tah-tag tah-tag-secondary\">${coreModule.api.Utils.i18n(trait.label ?? trait)}</span>`).join('')\n                : ''\n\n            const traitsAltHtml = tooltipData?.traitsAlt\n                ? tooltipData.traitsAlt.map(trait => `<span class=\"tah-tag tah-tag-alt\">${coreModule.api.Utils.i18n(trait.label)}</span>`).join('')\n                : ''\n\n            const modifiersHtml = tooltipData?.modifiers\n                ? `<div class=\"tah-tags\">${tooltipData.modifiers.filter(modifier => modifier.enabled).map(modifier => {\n                    const label = coreModule.api.Utils.i18n(modifier.label)\n                    const sign = modifier.modifier >= 0 ? '+' : ''\n                    const mod = `${sign}${modifier.modifier ?? ''}`\n                    return `<span class=\"tah-tag tah-tag-transparent\">${label} ${mod}</span>`\n                }).join('')}</div>`\n                : ''\n\n            const tagsJoined = [rarityHtml, traitsHtml, traits2Html, traitsAltHtml].join('')\n\n            const tagsHtml = (tagsJoined) ? `<div class=\"tah-tags\">${tagsJoined}</div>` : ''\n\n            const headerTags = (tagsHtml || modifiersHtml) ? `<div class=\"tah-tags-wrapper\">${tagsHtml}${modifiersHtml}</div>` : ''\n\n            if (!description && !tagsHtml && !modifiersHtml) return name\n\n            return `<div>${nameHtml}${headerTags}${description}${propertiesHtml}</div>`\n        }\n\n        #getWeaponProperties (weaponProperties) {\n            if (!weaponProperties) return null\n            return Object.entries(weaponProperties)\n                .filter(([id, selected]) => selected && WEAPON_PROPERTY[id])\n                .map(([id, _]) => coreModule.api.Utils.i18n(WEAPON_PROPERTY[id]))\n        }\n    }\n})\n","import { GROUP } from './constants.js'\n\n/**\n * Default categories and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    const groups = GROUP\n    Object.values(groups).forEach(group => {\n        group.name = coreModule.api.Utils.i18n(group.name)\n        group.listName = `Group: ${coreModule.api.Utils.i18n(group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    DEFAULTS = {\n        layout: [\n            {\n                nestId: 'inventory',\n                id: 'inventory',\n                name: coreModule.api.Utils.i18n('ROTV.Inventory'),\n                groups: [\n                    { ...groups.weapons, nestId: 'inventory_weapons' },\n                    { ...groups.equipment, nestId: 'inventory_equipment' },\n                    { ...groups.consumables, nestId: 'inventory_consumables' },\n                    { ...groups.tools, nestId: 'inventory_tools' },\n                    { ...groups.containers, nestId: 'inventory_containers' },\n                    { ...groups.loot, nestId: 'inventory_loot' }\n                ]\n            },\n            {\n                nestId: 'features',\n                id: 'features',\n                name: coreModule.api.Utils.i18n('ROTV.Features'),\n                groups: [\n                    { ...groups.activeFeatures, nestId: 'features_active-features' },\n                    { ...groups.passiveFeatures, nestId: 'features_passive-features' }\n                ]\n            },\n            {\n                nestId: 'spells',\n                id: 'spells',\n                name: coreModule.api.Utils.i18n('ITEM.TypeSpellPl'),\n                groups: [\n                    { ...groups.atWillSpells, nestId: 'spells_at-will-spells' },\n                    { ...groups.innateSpells, nestId: 'spells_innate-spells' },\n                    { ...groups.pactSpells, nestId: 'spells_pact-spells' },\n                    { ...groups.cantrips, nestId: 'spells_cantrips' },\n                    { ...groups._1stLevelSpells, nestId: 'spells_1st-level-spells' },\n                    { ...groups._2ndLevelSpells, nestId: 'spells_2nd-level-spells' },\n                    { ...groups._3rdLevelSpells, nestId: 'spells_3rd-level-spells' },\n                    { ...groups._4thLevelSpells, nestId: 'spells_4th-level-spells' },\n                    { ...groups._5thLevelSpells, nestId: 'spells_5th-level-spells' },\n                    { ...groups._6thLevelSpells, nestId: 'spells_6th-level-spells' },\n                    { ...groups._7thLevelSpells, nestId: 'spells_7th-level-spells' },\n                    { ...groups._8thLevelSpells, nestId: 'spells_8th-level-spells' },\n                    { ...groups._9thLevelSpells, nestId: 'spells_9th-level-spells' }\n                ]\n            },\n            {\n                nestId: 'attributes',\n                id: 'attributes',\n                name: coreModule.api.Utils.i18n('ROTV.Attributes'),\n                groups: [\n                    { ...groups.abilities, nestId: 'attributes_abilities' },\n                    { ...groups.skills, nestId: 'attributes_skills' }\n                ]\n            },\n            {\n                nestId: 'effects',\n                id: 'effects',\n                name: coreModule.api.Utils.i18n('ROTV.Effects'),\n                groups: [\n                    { ...groups.temporaryEffects, nestId: 'effects_temporary-effects' },\n                    { ...groups.passiveEffects, nestId: 'effects_passive-effects' },\n                    { ...groups.conditions, nestId: 'effects_conditions' }\n                ]\n            },\n            {\n                nestId: 'utility',\n                id: 'utility',\n                name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\n                groups: [\n                    { ...groups.combat, nestId: 'utility_combat' },\n                    { ...groups.token, nestId: 'utility_token' },\n                    { ...groups.rests, nestId: 'utility_rests' },\n                    { ...groups.utility, nestId: 'utility_utility' }\n                ]\n            }\n        ],\n        groups: groupsArray\n    }\n})\n","export let MagicItemActionHandlerExtender = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    MagicItemActionHandlerExtender = class MagicItemActionHandlerExtender extends coreModule.api.ActionHandlerExtender {\n        constructor (actionHandler) {\n            super()\n            this.actionHandler = actionHandler\n            this.actor = null\n        }\n\n        /**\n     * Extend the action list\n     */\n        async extendActionHandler () {\n            this.actor = this.actionHandler.actor\n            if (!this.actor) return\n\n            const actor = await MagicItems.actor(this.actor.id)\n\n            if (!actor) return\n\n            const magicItems = actor.items ?? []\n\n            if (magicItems.length === 0) return\n\n            const parentGroupId = 'magic-items'\n            const parentGroupType = 'system'\n            const parentGroupData = {\n                id: parentGroupId,\n                type: parentGroupType\n            }\n\n            magicItems.forEach((magicItem) => {\n                if (magicItem.attuned && !this._isItemAttuned(magicItem)) return\n                if (magicItem.equipped && !this._isItemEquipped(magicItem)) return\n\n                const groupId = `magic-items_${magicItem.id}`\n                const groupName = magicItem.name\n                const groupType = 'system-derived'\n                const groupInfo1 = `${magicItem.uses}/${magicItem.charges}`\n                const groupData = {\n                    id: groupId,\n                    name: groupName,\n                    type: groupType,\n                    info1: groupInfo1\n                }\n\n                // Add group to HUD\n                this.actionHandler.addGroup(groupData, parentGroupData)\n\n                const actions = magicItem.ownedEntries.map((entry) => {\n                    const effect = entry.item\n                    const id = effect.id\n                    const name = effect.name\n                    const encodedValue = [\n                        'magicItem',\n                        `${magicItem.id}>${id}`\n                    ].join('|')\n                    const img = coreModule.api.Utils.getImage(effect)\n                    const info1 = effect.consumption\n                    const info2 = (effect.baseLevel) ? `${coreModule.api.Utils.i18n('ROTV.AbbreviationLevel')} ${effect.baseLevel}` : ''\n                    return {\n                        id,\n                        name,\n                        encodedValue,\n                        img,\n                        info1,\n                        info2,\n                        selected: true\n                    }\n                })\n\n                // Add actions to action list\n                this.actionHandler.addActions(actions, groupData)\n            })\n        }\n\n        /**\n     * Whether the magic item is equipped or not\n     * @param {object} magicItem The item\n     * @returns {boolean}\n     */\n        _isItemEquipped (magicItem) {\n            return magicItem.item.system.equipped\n        }\n\n        /**\n     * Whether the magic items is attuned or not\n     * @param {object} magicItem The item\n     * @returns {boolean}\n     */\n        _isItemAttuned (magicItem) {\n            const attunement = magicItem.item.system.attunment\n            const attunementRequired = CONFIG.ROTV.attunementTypes?.REQUIRED ?? 1\n\n            if (attunement === attunementRequired) return false\n\n            return true\n        }\n    }\n})\n","export let RollHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    RollHandler = class RollHandler extends coreModule.api.RollHandler {\n    /**\n     * Handle action click\n     * @override\n     * @param {object} event\n     * @param {string} encodedValue\n     */\n        async handleActionClick (event, encodedValue) {\n            const [actionType, actionId] = encodedValue.split('|')\n\n            if (!this.actor) {\n                for (const token of coreModule.api.Utils.getControlledTokens()) {\n                    const actor = token.actor\n                    await this.#handleAction(event, actionType, actor, token, actionId)\n                }\n            } else {\n                await this.#handleAction(event, actionType, this.actor, this.token, actionId)\n            }\n        }\n\n        /**\n         * Handle action\n         * @private\n         * @param {object} event\n         * @param {string} actionType\n         * @param {object} actor\n         * @param {object} token\n         * @param {string} actionId\n         */\n        async #handleAction (event, actionType, actor, token, actionId) {\n            switch (actionType) {\n            case 'ability':\n                this.#rollAbility(event, actor, actionId)\n                break\n            case 'check':\n                this.#rollAbilityTest(event, actor, actionId)\n                break\n            case 'save':\n                this.#rollAbilitySave(event, actor, actionId)\n                break\n            case 'condition':\n                if (!token) return\n                await this.#toggleCondition(event, actor, token, actionId)\n                break\n            case 'counter':\n                await this.#modifyCounter(event, actor, actionId)\n                break\n            case 'effect':\n                await this.#toggleEffect(event, actor, actionId)\n                break\n            case 'exhaustion':\n                await this.#modifyExhaustion(event, actor)\n                break\n            case 'feature':\n            case 'item':\n            case 'spell':\n            case 'weapon':\n                if (this.isRenderItem()) this.renderItem(actor, actionId)\n                else this.#useItem(event, actor, actionId)\n                break\n            case 'magicItem':\n                await this.#rollMagicItem(actor, actionId)\n                break\n            case 'skill':\n                this.#rollSkill(event, actor, actionId)\n                break\n            case 'utility':\n                await this.#performUtilityAction(event, actor, token, actionId)\n                break\n            default:\n                break\n            }\n        }\n\n        /**\n         * Modify Counter\n         * @private\n         * @param {object} event The event\n         * @param {object} actor The actor\n         * @param {string} actionId The action id\n         */\n        async #modifyCounter (event, actor, actionId) {\n            switch (actionId) {\n            case 'death-saves':\n                this.#rollDeathSave(event, actor)\n                break\n            case 'exhaustion':\n                await this.#modifyExhaustion(event, actor)\n                break\n            case 'inspiration':\n                await this.#modifyInspiration(actor)\n                break\n            default:\n                await this.#modifyCustomCounter(event, actor, actionId)\n                break\n            }\n        }\n\n        /**\n         * Modify Exhaustion\n         * @private\n         * @param {object} event The event\n         * @param {object} actor The actor\n         */\n        async #modifyExhaustion (event, actor) {\n            const isRightClick = this.isRightClick(event)\n            const exhaustion = actor.system.attributes.exhaustion\n            const update = (isRightClick) ? exhaustion - 1 : exhaustion + 1\n            if (update >= 0) {\n                actor.update({ 'system.attributes.exhaustion': update })\n            }\n        }\n\n        /**\n         * Modify Inspiration\n         * @private\n         * @param {object} actor The actor\n         */\n        async #modifyInspiration (actor) {\n            const update = !actor.system.attributes.inspiration\n            actor.update({ 'system.attributes.inspiration': update })\n        }\n\n        /**\n         * Modify Custom Counter\n         * @private\n         * @param {object} event The event\n         * @param {object} actor The actor\n         * * @param {string} actionId The action id\n         */\n        async #modifyCustomCounter (event, actor, actionId) {\n            if (!coreModule.api.Utils.isModuleActive('rotv-custom-counters')) return\n\n            const [id, type] = decodeURIComponent(actionId).split('>')\n\n            const isRightClick = this.isRightClick(event)\n            const isCtrl = this.isCtrl(event)\n            let value = actor.getFlag('rotv-custom-counters', id)\n\n            switch (type) {\n            case 'checkbox':\n                await actor.setFlag('rotv-custom-counters', id, !value)\n                break\n            case 'number':\n                value = value ?? 0\n                if (isRightClick) {\n                    if (value > 0) {\n                        await actor.setFlag('rotv-custom-counters', id, value - 1)\n                    }\n                } else {\n                    await actor.setFlag('rotv-custom-counters', id, value + 1)\n                }\n                break\n            case 'successFailure':\n                value = value ?? {}\n                value.success = value?.success ?? 0\n                value.failure = value?.failure ?? 0\n                if (isRightClick) {\n                    if (isCtrl) {\n                        if (value?.failure > 0) {\n                            await actor.setFlag('rotv-custom-counters', `${id}.failure`, value.failure - 1)\n                        }\n                    } else {\n                        if (value?.success > 0) {\n                            await actor.setFlag('rotv-custom-counters', `${id}.success`, value.success - 1)\n                        }\n                    }\n                } else {\n                    if (isCtrl) {\n                        await actor.setFlag('rotv-custom-counters', `${id}.failure`, value.failure + 1)\n                    } else {\n                        await actor.setFlag('rotv-custom-counters', `${id}.success`, value.success + 1)\n                    }\n                }\n            }\n        }\n\n        /**\n         * Roll Ability\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #rollAbility (event, actor, actionId) {\n            if (!actor) return\n            if (!actor.system?.abilities) return\n            actor.rollAbility(actionId, { event })\n        }\n\n        /**\n         * Roll Ability Save\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #rollAbilitySave (event, actor, actionId) {\n            if (!actor) return\n            if (!actor.system?.abilities) return\n            actor.rollAbilitySave(actionId, { event })\n        }\n\n        /**\n         * Roll Ability Test\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #rollAbilityTest (event, actor, actionId) {\n            if (!actor) return\n            if (!actor.system?.abilities) return\n            actor.rollAbilityTest(actionId, { event })\n        }\n\n        /**\n         * Roll Death Save\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         */\n        #rollDeathSave (event, actor) {\n            actor.rollDeathSave({ event })\n        }\n\n        /**\n         * Roll Magic Item\n         * @private\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #rollMagicItem (actor, actionId) {\n            const actionParts = actionId.split('>')\n\n            const itemId = actionParts[0]\n            const magicEffectId = actionParts[1]\n\n            const magicItemActor = await MagicItems.actor(actor.id)\n\n            // magicitems module 3.0.0 does not support ItemRotV#use\n            magicItemActor.roll(itemId, magicEffectId)\n\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Roll Skill\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #rollSkill (event, actor, actionId) {\n            if (!actor) return\n            if (!actor.system?.skills) return\n            actor.rollSkill(actionId, { event })\n        }\n\n        /**\n         * Use Item\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         * @returns {object}        The item\n         */\n        #useItem (event, actor, actionId) {\n            const item = coreModule.api.Utils.getItem(actor, actionId)\n\n            if (this.#needsRecharge(item)) {\n                item.rollRecharge()\n                return\n            }\n\n            return item.use({ event })\n        }\n\n        /**\n         * Needs Recharge\n         * @private\n         * @param {object} item\n         * @returns {boolean}\n         */\n        #needsRecharge (item) {\n            return (\n                item.system.recharge &&\n                !item.system.recharge.charged &&\n                item.system.recharge.value\n            )\n        }\n\n        /**\n         * Perform utility action\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {object} token    The token\n         * @param {string} actionId The action id\n         */\n        async #performUtilityAction (event, actor, token, actionId) {\n            switch (actionId) {\n            case 'deathSave':\n                this.#rollDeathSave(event, actor)\n                break\n            case 'endTurn':\n                if (!token) break\n                if (game.combat?.current?.tokenId === token.id) {\n                    await game.combat?.nextTurn()\n                }\n                break\n            case 'initiative':\n                await this.#rollInitiative(actor)\n                break\n            case 'inspiration':\n                await this.#modifyInspiration(actor)\n                break\n            case 'longRest':\n                actor.longRest()\n                break\n            case 'shortRest':\n                actor.shortRest()\n                break\n            }\n\n            // Update HUD\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Roll Initiative\n         * @param {object} actor The actor\n         * @private\n         */\n        async #rollInitiative (actor) {\n            if (!actor) return\n            await actor.rollInitiative({ createCombatants: true })\n\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Toggle Condition\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {object} token    The token\n         * @param {string} actionId The action id\n         */\n        async #toggleCondition (event, actor, token, actionId) {\n            if (!token) return\n\n            const isRightClick = this.isRightClick(event)\n            const statusEffect = CONFIG.statusEffects.find(statusEffect => statusEffect.id === actionId)\n            const isConvenient = (statusEffect?.flags)\n                ? Object.hasOwn(statusEffect.flags, 'dfreds-convenient-effects')\n                    ? statusEffect.flags['dfreds-convenient-effects'].isConvenient\n                    : null\n                : null ??\n                actionId.startsWith('Convenient Effect')\n\n            if (game.dfreds && isConvenient) {\n                isRightClick\n                    ? await game.dfreds.effectInterface.toggleEffect(statusEffect.name ?? statusEffect.label, { overlay: true })\n                    : await game.dfreds.effectInterface.toggleEffect(statusEffect.name ?? statusEffect.label)\n            } else {\n                const condition = this.#findCondition(actionId)\n                if (!condition) return\n                const effect = this.#findEffect(actor, actionId)\n                if (effect?.disabled) { await effect.delete() }\n\n                isRightClick\n                    ? await token.toggleEffect(condition, { overlay: true })\n                    : await token.toggleEffect(condition)\n            }\n\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Find condition\n         * @private\n         * @param {string} actionId The action id\n         * @returns {object}        The condition\n         */\n        #findCondition (actionId) {\n            return CONFIG.statusEffects.find((effect) => effect.id === actionId)\n        }\n\n        /**\n         * Find effect\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         * @returns {object}        The effect\n         */\n        #findEffect (actor, actionId) {\n            if (game.version.startsWith('11')) {\n                return actor.effects.find(effect => effect.statuses.every(status => status === actionId))\n            } else {\n                // V10\n                return actor.effects.find(effect => effect.flags?.core?.statusId === actionId)\n            }\n        }\n\n        /**\n         * Toggle Effect\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #toggleEffect (event, actor, actionId) {\n            const effects = 'find' in actor.effects.entries ? actor.effects.entries : actor.effects\n            let effect = effects.find(effect => effect.id === actionId)\n\n            // only allow deletion if effect is directly on this actor\n            let internalEffect = true\n\n            // if the effect isn't directly on the actor, search all applicable effects for it\n            if (!effect) {\n                internalEffect = false\n                for (const e of actor.allApplicableEffects()) {\n                    if (e.id === actionId) {\n                        effect = e\n                    }\n                }\n            }\n\n            if (!effect) return\n\n            const isRightClick = this.isRightClick(event)\n\n            if (isRightClick && internalEffect) {\n                await effect.delete()\n            } else {\n                await effect.update({ disabled: !effect.disabled })\n            }\n\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Handle action hover\n         * @override\n         * @param {object} event\n         * @param {string} encodedValue\n         */\n        async handleActionHover (event, encodedValue) {\n            const types = ['feature', 'item', 'spell', 'weapon', 'magicItem']\n            const [actionType, actionId] = encodedValue.split('|')\n\n            if (!types.includes(actionType)) return\n\n            const item = coreModule.api.Utils.getItem(this.actor, actionId)\n\n            switch (event.type) {\n            case 'mouseenter':\n            case 'mouseover':\n                Hooks.call('tokenActionHudSystemActionHoverOn', event, item)\n                break\n            case 'mouseleave':\n            case 'mouseout':\n                Hooks.call('tokenActionHudSystemActionHoverOff', event, item)\n                break\n            }\n        }\n    }\n})\n","import { RollHandler } from './roll-handler.js'\n\nexport class RollHandlerObsidian extends RollHandler {\n    /**\n     * Roll Ability Test\n     * @override\n     * @param {object} event\n     * @param {string} actionId\n     */\n    _rollAbilityTest (event, actionId) {\n        OBSIDIAN.Items.roll(super.actor, { roll: 'abl', abl: actionId })\n    }\n\n    /**\n     * Roll Ability Save\n     * @override\n     * @param {object} event\n     * @param {string} actorId\n     * @param {string} tokenId\n     * @param {string} actionId\n     */\n    _rollAbilitySave (event, actionId) {\n        OBSIDIAN.Items.roll(super.actor, { roll: 'save', save: actionId })\n    }\n\n    /**\n     * Roll Skill\n     * @override\n     * @param {object} event\n     * @param {string} actionId\n     */\n    _rollSkill (event, actionId) {\n        OBSIDIAN.Items.roll(super.actor, { roll: 'skl', skl: actionId })\n    }\n\n    /**\n     * Use Item\n     * @override\n     * @param {object} event\n     * @param {string} actionId\n     */\n    _useItem (event, actionId) {\n        OBSIDIAN.Items.roll(super.actor, { roll: 'item', id: actionId })\n    }\n}\n","import { MODULE } from './constants.js'\n\nexport function register (updateFunc) {\n    game.settings.register(MODULE.ID, 'abbreviateSkills', {\n        name: game.i18n.localize(\n            'tokenActionHud.rotv.settings.abbreviateSkills.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.rotv.settings.abbreviateSkills.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showSlowActions', {\n        name: game.i18n.localize(\n            'tokenActionHud.rotv.settings.showSlowActions.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.rotv.settings.showSlowActions.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'displaySpellInfo', {\n        name: game.i18n.localize(\n            'tokenActionHud.rotv.settings.displaySpellInfo.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.rotv.settings.displaySpellInfo.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showUnchargedItems', {\n        name: game.i18n.localize(\n            'tokenActionHud.rotv.settings.showUnchargedItems.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.rotv.settings.showUnchargedItems.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showUnequippedItems', {\n        name: game.i18n.localize(\n            'tokenActionHud.rotv.settings.showUnequippedItems.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.rotv.settings.showUnequippedItems.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showUnequippedItemsNpcs', {\n        name: game.i18n.localize(\n            'tokenActionHud.rotv.settings.showUnequippedItemsNpcs.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.rotv.settings.showUnequippedItemsNpcs.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showUnpreparedSpells', {\n        name: game.i18n.localize(\n            'tokenActionHud.rotv.settings.showUnpreparedSpells.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.rotv.settings.showUnpreparedSpells.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showItemsWithoutActivationCosts', {\n        name: game.i18n.localize(\n            'tokenActionHud.rotv.settings.showItemsWithoutActivationCosts.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.rotv.settings.showItemsWithoutActivationCosts.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n}\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { MagicItemActionHandlerExtender } from './magic-items-extender.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { RollHandlerObsidian as ObsidianRotV } from './roll-handler-obsidian.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\n        /** @override */\n        getActionHandler () {\n            const actionHandler = new ActionHandler()\n            if (coreModule.api.Utils.isModuleActive('magic-items-2') || coreModule.api.Utils.isModuleActive('magicitems')) { actionHandler.addActionHandlerExtender(new MagicItemActionHandlerExtender(actionHandler)) }\n            return actionHandler\n        }\n\n        /** @override */\n        getAvailableRollHandlers () {\n            let coreTitle = 'Core RotVRotV'\n\n            if (coreModule.api.Utils.isModuleActive('midi-qol')) { coreTitle += ` [supports ${coreModule.api.Utils.getModuleTitle('midi-qol')}]` }\n\n            const choices = { core: coreTitle }\n            coreModule.api.SystemManager.addHandler(choices, 'obsidian')\n\n            return choices\n        }\n\n        /** @override */\n        getRollHandler (rollHandlerId) {\n            let rollHandler\n            switch (rollHandlerId) {\n            case 'obsidian':\n                rollHandler = new ObsidianRotV()\n                break\n            case 'core':\n            default:\n                rollHandler = new Core()\n                break\n            }\n\n            return rollHandler\n        }\n\n        /** @override */\n        registerSettings (onChangeFunction) {\n            systemSettings.register(onChangeFunction)\n        }\n\n        /** @override */\n        async registerDefaults () {\n            const defaults = DEFAULTS\n            // If the 'Magic Items' module is active, then add a group for it\n            if (game.modules.get('magicitems')?.active || game.modules.get('magic-items-2')?.active) {\n                const name = coreModule.api.Utils.i18n('tokenActionHud.rotv.magicItems')\n                defaults.groups.push(\n                    {\n                        id: 'magic-items',\n                        name,\n                        listName: `Group: ${name}`,\n                        type: 'system'\n                    }\n                )\n                defaults.groups.sort((a, b) => a.id.localeCompare(b.id))\n            }\n            return defaults\n        }\n    }\n})\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n    const module = game.modules.get(MODULE.ID)\n    module.api = {\n        requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n        SystemManager\n    }\n    Hooks.call('tokenActionHudSystemReady', module)\n})\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","ability","check","condition","counter","effect","exhaustion","feature","item","save","skill","spell","utility","ACTIVATION_TYPE_ICON","bonus","crew","day","hour","lair","minute","legendary","reaction","special","CONCENTRATION_ICON","CONDITION","blind","uuid","blinded","charmed","deaf","deafened","fear","frightened","grappled","incapacitated","invisible","paralysis","paralyzed","petrified","poison","poisoned","prone","restrain","restrained","stun","stunned","unconscious","GROUP","_1stLevelSpells","id","name","type","_2ndLevelSpells","_3rdLevelSpells","_4thLevelSpells","_5thLevelSpells","_6thLevelSpells","_7thLevelSpells","_8thLevelSpells","_9thLevelSpells","abilities","actions","activeFeatures","artificerInfusions","atWillSpells","backgroundFeatures","bonusActions","cantrips","channelDivinity","checks","classFeatures","combat","conditions","consumables","containers","counters","crewActions","defensiveTactics","eldritchInvocations","elementalDisciplines","equipment","equipped","feats","fightingStyles","huntersPrey","innateSpells","kiAbilities","lairActions","legendaryActions","loot","maneuvers","metamagicOptions","monsterFeatures","multiattacks","otherActions","pactBoons","pactSpells","passiveEffects","passiveFeatures","psionicPowers","raceFeatures","reactions","rests","runes","saves","skills","superiorHuntersDefense","temporaryEffects","token","tools","unequipped","weapons","PREPARED_ICON","PROFICIENCY_LEVEL_ICON","RARITY","common","uncommon","rare","veryRare","artifact","RITUAL_ICON","WEAPON_PROPERTY","ada","amm","fin","fir","foc","hvy","lgt","lod","mgc","rch","rel","ret","sil","spc","thr","two","ver","Utils","Hooks","once","async","coreModule","getSetting","key","defaultValue","value","game","settings","get","api","Logger","debug","setSetting","set","ActionHandler","actors","tokens","actorType","items","abbreviateSkills","displaySpellInfo","showItemsWithoutActivationCosts","showUnchargedItems","showUnequippedItems","showUnpreparedSpells","activationgroupIds","featuregroupIds","inventorygroupIds","spellgroupIds","featureActions","inventoryActions","spellActions","systemVersion","rotv","version","buildSystemActions","groupIds","this","actor","getActors","getTokens","discardSlowItems","sortItemsByName","buildCharacterActions","buildVehicleActions","buildMultipleTokenActions","Promise","all","buildConditions","buildEffects","buildFeatures","buildInventory","buildSpells","buildAbilities","buildCombat","buildCounters","buildExhaustion","buildRests","buildSkills","buildUtility","actionType","groupId","system","CONFIG","ROTV","length","Object","entries","filter","map","abilityId","abbreviatedName","charAt","toUpperCase","slice","label","listName","i18n","encodedValue","join","delimiter","icon1","getProficiencyIcon","proficient","mod","info1","text","getModifier","info2","groupData","addActions","buildActivations","data","actionData","activationItems","Map","activationTypeMappings","action","reactiondamage","reactionmanual","other","activationType","activation","keys","includes","has","activationGroupId","groupDataClone","defaultSelected","parentgroupData","addGroup","addGroupInfo","buildActions","combatTypes","initiative","endTurn","current","tokenId","combatType","cssClass","getControlledTokens","tokenIds","combatants","combatant","currentInitiative","class","every","statusEffects","startsWith","effects","some","statuses","status","disabled","flags","core","statusId","img","getImage","tooltipData","getConditionTooltipData","tooltip","getTooltip","isModuleActive","_","visible","encodeURIComponent","active","attributes","death","success","failure","getFlag","allApplicableEffects","size","effectId","isSuppressed","parent","identified","user","isGM","isTemporary","featuresMap","featureTypes","classFeatureTypes","subType","subtype","featureType","groupNameMappings","inventoryMap","hasQuantity","quantity","isActiveItem","isUsableItem","isEquippedItem","restTypes","shortRest","longRest","restType","total","error","spellsMap","isUsableSpell","preparation","mode","level","systemSpells","spells","reverse","pactSlot","spellSlots","spellSlotAvailable","pactSlotAvailable","hasValue","hasMax","max","hasLevel","slotAvailable","push","slotsAvailable","pactSpellEquivalent","findIndex","groupMappings","spellMode","spellSlotModes","groupName","levelInfo","find","spellSlot","slots","groupInfo","info","utilityTypes","deathSave","inspiration","hp","utilityType","options","getAction","entity","_id","recharge","charged","hasOwn","getActivationTypeIcon","icon2","getPreparedIcon","icon3","getConcentrationIcon","getItemInfo","info3","getTooltipData","activationTypes","abilityActivationTypes","at","uses","prepared","preparationModes","spellPreparationModes","preparationMode","getSpellInfo","getQuantityData","getUsesData","consume","getConsumeData","title","getRangeData","componentsArray","components","properties","forEach","component","allowedTypes","consumeName","consumeAmount","per","prompt","of","period","limitedUsePeriods","amount","undefined","consumeId","target","consumeType","parentId","substr","lastIndexOf","foundry","utils","getProperty","range","slowActivationTypes","filteredItems","proficiencyLevels","icon","tooltipsSetting","unidentified","description","modifiers","rarity","traits","chatProperties","equippableItemCardProperties","activatedEffectCardProperties","p","getWeaponProperties","journalEntry","fromUuid","content","relativeTo","nameHtml","descriptionLocalised","TextEditor","enrichHTML","secrets","rarityHtml","propertiesHtml","property","traitsHtml","trait","traits2Html","traits2","traitsAltHtml","traitsAlt","modifiersHtml","modifier","enabled","tagsJoined","tagsHtml","weaponProperties","selected","DEFAULTS","groups","values","group","groupsArray","layout","nestId","MagicItemActionHandlerExtender","ActionHandlerExtender","constructor","actionHandler","super","extendActionHandler","MagicItems","magicItems","parentGroupData","magicItem","attuned","_isItemAttuned","_isItemEquipped","charges","ownedEntries","entry","consumption","baseLevel","attunment","attunementTypes","REQUIRED","RollHandler","handleActionClick","event","actionId","split","handleAction","rollAbility","rollAbilityTest","rollAbilitySave","toggleCondition","modifyCounter","toggleEffect","modifyExhaustion","isRenderItem","renderItem","useItem","rollMagicItem","rollSkill","performUtilityAction","rollDeathSave","modifyInspiration","modifyCustomCounter","isRightClick","update","decodeURIComponent","isCtrl","setFlag","actionParts","itemId","magicEffectId","roll","callAll","getItem","needsRecharge","use","rollRecharge","nextTurn","rollInitiative","createCombatants","statusEffect","isConvenient","dfreds","effectInterface","overlay","findCondition","findEffect","delete","internalEffect","e","handleActionHover","call","RollHandlerObsidian","_rollAbilityTest","OBSIDIAN","Items","abl","_rollAbilitySave","_rollSkill","skl","_useItem","register","updateFunc","localize","hint","scope","config","Boolean","default","onChange","SystemManager","getActionHandler","addActionHandlerExtender","getAvailableRollHandlers","coreTitle","getModuleTitle","choices","addHandler","getRollHandler","rollHandlerId","rollHandler","ObsidianRotV","Core","registerSettings","onChangeFunction","systemSettings.register","registerDefaults","defaults","modules","sort","a","b","localeCompare","on","module","requiredCoreModuleVersion"],"mappings":"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"}